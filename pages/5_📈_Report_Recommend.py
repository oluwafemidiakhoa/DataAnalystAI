<<<<<<< HEAD
# frontend/pages/5_📈_Report_Recommend.py
import streamlit as st
import pandas as pd
import plotly.graph_objects as go # Use for KPI indicators maybe
import logging
import time

# Placeholder for backend imports
# from backend.reporting.kpi_manager import define_kpi, track_kpi, get_kpi_data # Example
# from backend.reporting.report_builder import generate_narrative_report # Example
# from backend.recommendations.recommender import generate_recommendations # Example
# from backend.reporting.visualizer import create_plotly_chart # Reuse visualizer

# --- Mock/Placeholder Backend Functions ---
def mock_define_kpi(kpi_name, calculation_logic, data_context):
    print(f"Mock KPI Defined: {kpi_name} = {calculation_logic}")
    time.sleep(0.5)
    # Simulate saving or returning definition
    return {"name": kpi_name, "logic": calculation_logic, "id": hash(kpi_name)}

def mock_track_kpi(kpi_id, data_context):
     # Simulate calculating KPI value (e.g., from the latest analysis results)
     time.sleep(1)
     import random
     # Use dummy data if no real data available
     value = random.uniform(50, 5000) if kpi_id else 0
     trend = random.choice([-1, 0, 1]) # -1 down, 0 flat, 1 up
     print(f"Mock KPI Tracked: ID {kpi_id}, Value: {value}, Trend: {trend}")
     return {"value": value, "trend": trend}

def mock_generate_narrative_report(report_goal, analysis_results, insights, kpis):
    time.sleep(4)
    report_text = f"## Mock Narrative Report: {report_goal}\n\n"
    report_text += "**Analysis Summary:**\n"
    if analysis_results is not None:
        report_text += f"- The analysis included {len(analysis_results)} data points.\n"
        report_text += f"- Key columns analyzed: {', '.join(analysis_results.columns)}\n"
    else:
        report_text += "- No specific analysis results were provided for this report.\n"

    report_text += "\n**Key Insights:**\n"
    report_text += insights if insights else "- No specific insights were generated or provided.\n"

    report_text += "\n**KPI Status:**\n"
    if kpis:
        for name, data in kpis.items():
            trend_symbol = "➡️" if data['trend'] == 0 else "⬆️" if data['trend'] == 1 else "⬇️"
            report_text += f"- {name}: {data['value']:.2f} {trend_symbol}\n"
    else:
        report_text += "- No KPIs are currently being tracked for this report.\n"

    report_text += "\n**Generated by AI Assistant.**"
    return report_text # In reality, might return text and maybe chart objects/config

def mock_generate_recommendations(insights, analysis_results, kpis):
    time.sleep(2)
    recs = []
    recs.append({
        "recommendation": "Mock Rec 1: Increase marketing spend in top-performing regions based on sales analysis.",
        "rationale": "Analysis showed Region X and Y have highest potential.",
        "confidence": "Medium"
    })
    if kpis:
         kpi_name = list(kpis.keys())[0]
         if kpis[kpi_name]['trend'] == -1:
             recs.append({
                 "recommendation": f"Mock Rec 2: Investigate the decline in KPI '{kpi_name}'.",
                 "rationale": f"The trend for {kpi_name} is currently downwards.",
                 "confidence": "High"
             })
    recs.append({
        "recommendation": "Mock Rec 3: Conduct A/B testing on website checkout flow to improve conversion rate.",
        "rationale": "General best practice for e-commerce optimization.",
        "confidence": "Low"
    })
    return recs


# --- Logging ---
logger = logging.getLogger(__name__)

# --- Page Specific Configuration ---
st.set_page_config(page_title="Report & Recommend", layout="wide")
st.title("5. 📈 Report & Recommend")
st.markdown("Generate reports, track KPIs, and get actionable recommendations based on your analysis.")

# --- Initialize Session State ---
# Required states from previous steps
if 'analysis_results' not in st.session_state: st.session_state.analysis_results = None
if 'deep_insights' not in st.session_state: st.session_state.deep_insights = ""
# States for this page
if 'defined_kpis' not in st.session_state: st.session_state.defined_kpis = {} # Dict: {kpi_name: {logic, id, ...}}
if 'tracked_kpi_data' not in st.session_state: st.session_state.tracked_kpi_data = {} # Dict: {kpi_name: {value, trend}}
if 'generated_report' not in st.session_state: st.session_state.generated_report = ""
if 'generated_recommendations' not in st.session_state: st.session_state.generated_recommendations = []

# --- Check if Analysis Results are Available ---
if st.session_state.analysis_results is None:
    st.warning("⚠️ Please run an analysis in **4_📊_Analyze_Insight** first to generate reports and recommendations.")
    st.stop()

# --- Main Layout: KPIs | Reporting | Recommendations ---
kpi_col, report_col, rec_col = st.columns(3)

# --- KPI Section ---
with kpi_col:
    st.subheader("🎯 Key Performance Indicators (KPIs)")

    with st.form("kpi_form"):
        kpi_name = st.text_input("KPI Name", placeholder="e.g., Average Order Value")
        kpi_logic = st.text_area("Calculation Logic / Description", placeholder="e.g., SUM(sales) / COUNT(orders)")
        submitted = st.form_submit_button("Define KPI")
        if submitted:
            if not kpi_name or not kpi_logic:
                st.warning("Please provide both a name and logic/description for the KPI.")
            else:
                 with st.spinner("Defining KPI..."):
                    try:
                        # Replace with actual backend call (needs data context)
                        kpi_def = mock_define_kpi(kpi_name, kpi_logic, st.session_state.analysis_results)
                        st.session_state.defined_kpis[kpi_name] = kpi_def
                        st.success(f"KPI '{kpi_name}' defined.")
                        # Optionally track immediately
                        kpi_data = mock_track_kpi(kpi_def['id'], st.session_state.analysis_results)
                        st.session_state.tracked_kpi_data[kpi_name] = kpi_data

                    except Exception as e:
                         st.error(f"Failed to define KPI: {e}")
                         logger.error(f"KPI definition failed: {e}", exc_info=True)

    st.markdown("**Tracked KPIs:**")
    if not st.session_state.tracked_kpi_data:
        st.info("Define KPIs above to start tracking.")
    else:
        num_kpi_cols = 2 # Display KPIs in 2 columns
        kpi_display_cols = st.columns(num_kpi_cols)
        kpi_items = list(st.session_state.tracked_kpi_data.items())

        for i, (name, data) in enumerate(kpi_items):
             col_index = i % num_kpi_cols
             with kpi_display_cols[col_index]:
                delta_value = None # You'd calculate delta based on previous value in real app
                trend_symbol = "arrow-right" if data['trend'] == 0 else "arrow-up" if data['trend'] == 1 else "arrow-down"
                # Use st.metric for a nice visual
                st.metric(
                    label=f"{name} ({trend_symbol})",
                    value=f"{data.get('value', 0):,.2f}", # Format value
                    # delta=delta_value, # Add delta later
                    # delta_color="normal" # or "inverse" or "off"
                 )

    if st.session_state.defined_kpis:
         if st.button("Refresh KPI Values", key="refresh_kpis_btn"):
              with st.spinner("Updating KPI values..."):
                   updated_kpi_data = {}
                   try:
                       for name, kpi_def in st.session_state.defined_kpis.items():
                           # Replace with actual backend call
                           kpi_data = mock_track_kpi(kpi_def['id'], st.session_state.analysis_results)
                           updated_kpi_data[name] = kpi_data
                       st.session_state.tracked_kpi_data = updated_kpi_data
                       st.success("KPIs refreshed.")
                       st.rerun()
                   except Exception as e:
                        st.error(f"Failed to refresh KPIs: {e}")
                        logger.error(f"KPI refresh failed: {e}", exc_info=True)


# --- Reporting Section ---
with report_col:
    st.subheader("📄 Generate Reports")
    report_goal = st.text_input("Report Goal", placeholder="e.g., Monthly Sales Performance Summary", key="report_goal_input")

    if st.button("Generate Narrative Report", key="gen_report_btn"):
        if not report_goal:
            st.warning("Please enter a goal for the report.")
        else:
             with st.spinner("Generating narrative report with AI..."):
                 try:
                      # Replace with actual backend call
                      report_content = mock_generate_narrative_report(
                          report_goal,
                          st.session_state.analysis_results,
                          st.session_state.deep_insights,
                          st.session_state.tracked_kpi_data
                      )
                      st.session_state.generated_report = report_content
                      st.success("Report generated.")
                 except Exception as e:
                      st.error(f"Failed to generate report: {e}")
                      logger.error(f"Report generation failed: {e}", exc_info=True)

    st.markdown("**Generated Report:**")
    if st.session_state.generated_report:
         # Display report content (potentially with formatting)
         st.text_area("Report", value=st.session_state.generated_report, height=400, disabled=True, key="report_display_area")
         # Add download button (e.g., download markdown/text)
         st.download_button(
              label="Download Report (.txt)",
              data=st.session_state.generated_report.encode('utf-8'),
              file_name=f"{report_goal.replace(' ','_')}_report.txt",
              mime="text/plain"
         )
         # TODO: Add PDF/PPTX export options using backend libraries
    else:
         st.info("Generate a report using the button above.")


# --- Recommendations Section ---
with rec_col:
    st.subheader("💡 Actionable Recommendations")

    if st.button("Generate Recommendations", key="gen_rec_btn"):
         with st.spinner("Generating recommendations with AI..."):
              try:
                   # Replace with actual backend call
                   recommendations = mock_generate_recommendations(
                       st.session_state.deep_insights,
                       st.session_state.analysis_results,
                       st.session_state.tracked_kpi_data
                   )
                   st.session_state.generated_recommendations = recommendations
                   st.success("Recommendations generated.")
              except Exception as e:
                   st.error(f"Failed to generate recommendations: {e}")
                   logger.error(f"Recommendation generation failed: {e}", exc_info=True)


    st.markdown("**AI Recommendations:**")
    if not st.session_state.generated_recommendations:
        st.info("Click 'Generate Recommendations' to get suggestions.")
    else:
        for i, rec in enumerate(st.session_state.generated_recommendations):
             with st.container(border=True):
                 st.markdown(f"**Recommendation {i+1}:** {rec['recommendation']}")
                 st.caption(f"Rationale: {rec.get('rationale', 'N/A')} (Confidence: {rec.get('confidence', 'N/A')})")
                 # Add buttons for actions like "Mark as Actioned", "Dismiss", etc. later
=======
# pages/5_📈_Report_Recommend.py
# Note: This file should be in the 'pages/' directory at the project root.

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import logging
import time
import json
from io import BytesIO
from typing import List, Dict, Any, Optional, Union

# --- Get Logger ---
logger = logging.getLogger(__name__)

# --- Backend Function Imports ---
BACKEND_AVAILABLE = False
PDF_EXPORT_AVAILABLE = False
PPTX_EXPORT_AVAILABLE = False
DB_AVAILABLE_FOR_FEEDBACK = False
# Initialize function variables
define_kpi_func=None; track_kpis_func=None; build_report_func=None; generate_recs_func=None; display_kpi=None; create_pdf_report=None; create_pptx_report=None; store_recommendation_feedback_func=None; get_db_session=None

# Define dummy functions first
def _dummy_func(*args, **kwargs): logger.error(f"Called dummy func '{kwargs.get('name','unknown')}'!"); return None
def _dummy_bool_func(*args, **kwargs): logger.warning(f"Called dummy bool func '{kwargs.get('name','unknown')}'."); return False
def _dummy_list_func(*args, **kwargs): logger.warning(f"Called dummy list func '{kwargs.get('name','unknown')}'."); return []
def _dummy_dict_func(*args, **kwargs): logger.warning(f"Called dummy dict func '{kwargs.get('name','unknown')}'."); return {}
def _dummy_io_func(*args, **kwargs): logger.warning(f"Called dummy export func '{kwargs.get('name','unknown')}'."); return BytesIO(b'Error')
def _dummy_display_kpi(*args, **kwargs): st.metric(label=kwargs.get('label', 'Mock KPI'), value=f"{kwargs.get('value', 0):,.2f}")
def _dummy_db_session(): logger.error("Dummy DB session context used!"); yield None

# Assign dummies initially
define_kpi_func=_dummy_func; track_kpis_func=_dummy_dict_func; build_report_func=_dummy_dict_func; generate_recs_func=_dummy_list_func; display_kpi=_dummy_display_kpi; create_pdf_report=_dummy_io_func; create_pptx_report=_dummy_io_func; store_recommendation_feedback_func=_dummy_bool_func; get_db_session=_dummy_db_session

try:
    # --- Attempt to import REAL backend functions ---
    from backend.reporting.kpi_manager import define_kpi, track_all_active_kpis
    from backend.reporting.report_builder import build_narrative_report
    # ** FIX 1 (VERIFIED): Ensure this function name is correct in the import **
    from backend.recommendations.recommender import generate_recommendations, store_recommendation_feedback
    from frontend.components.kpi_card import display_kpi # Component import
    try:
        from backend.database.session import get_db_session
        DB_AVAILABLE_FOR_FEEDBACK = True
    except ImportError: logger.warning("DB session manager not found."); get_db_session = _dummy_db_session

    # Assign real functions (overwrites dummies)
    define_kpi_func = define_kpi; track_kpis_func = track_all_active_kpis; build_report_func = build_narrative_report; generate_recs_func = generate_recommendations; store_recommendation_feedback_func = store_recommendation_feedback
    # display_kpi is imported directly

    # Optional: Try importing exporters
    try: from backend.reporting.exporters import create_pdf_report; PDF_EXPORT_AVAILABLE = True; logger.info("PDF exporter loaded.")
    except ImportError: logger.warning("PDF Exporter not found."); create_pdf_report = _dummy_io_func
    try: from backend.reporting.exporters import create_pptx_report; PPTX_EXPORT_AVAILABLE = True; logger.info("PPTX exporter loaded.")
    except ImportError: logger.warning("PPTX Exporter not found."); create_pptx_report = _dummy_io_func

    BACKEND_AVAILABLE = True
    logger.info("Core backend modules imported successfully in Report_Recommend page.")

except ImportError as e:
    logger.error(f"Core backend import failed in Report_Recommend: {e}", exc_info=True)
    st.error(f"CRITICAL: Core backend modules not found. Using MOCK functions. Error: {e}", icon="🚨")
    # --- Attempt to import MOCK functions ---
    try:
        # ** FIX 2: Use absolute import for mocks **
        from pages._mocks import (
            mock_define_kpi, mock_track_all_active_kpis,
            mock_build_narrative_report, mock_generate_recommendations
        )
        # Assign MOCK functions (overwrites dummies)
        define_kpi_func = mock_define_kpi; track_kpis_func = mock_track_all_active_kpis; build_report_func = mock_build_narrative_report; generate_recs_func = mock_generate_recommendations
        # Keep other dummies defined above
        logger.info("Loaded MOCK functions for Report_Recommend.")
    except ImportError as mock_e: logger.critical(f"Failed mock import: {mock_e}", exc_info=True); st.error(f"CRITICAL ERROR: Fallback failed: {mock_e}", icon="🚨"); st.stop()
    except Exception as general_mock_e: logger.critical(f"Unexpected mock import error: {general_mock_e}", exc_info=True); st.error(f"Setup error: {general_mock_e}", icon="🚨"); st.stop()
except Exception as e: logger.critical(f"Backend import error: {e}", exc_info=True); st.error(f"Setup error: {e}", icon="🚨"); st.stop()

# --- Safety Check ---
if not all([define_kpi_func, track_kpis_func, build_report_func, generate_recs_func, display_kpi, store_recommendation_feedback_func]):
     logger.critical("Essential functions failed load."); st.error("App setup error.", icon="🚨"); st.stop()
# Assign dummy exporters if needed after try blocks
if not PDF_EXPORT_AVAILABLE: create_pdf_report = lambda *args, **kwargs: (_ for _ in ()).throw(NotImplementedError("PDF Exporter unavailable"))
if not PPTX_EXPORT_AVAILABLE: create_pptx_report = lambda *args, **kwargs: (_ for _ in ()).throw(NotImplementedError("PPTX Exporter unavailable"))

# --- Page Title and Introduction ---
st.header("5. 📈 Report & Recommend")
st.markdown("""Define KPIs, generate narrative reports, get actionable recommendations, and provide feedback.""")
st.divider()

# --- Initialize Session State ---
keys_needed = ['analysis_results', 'deep_insights', 'defined_kpis', 'tracked_kpi_data',
               'generated_report_data', 'generated_recommendations', 'recommendation_feedback',
               'active_dataframe', 'connection_info', 'analysis_plot', 'current_plot', 'current_user',
               'cleaned_dataframe', 'engineered_dataframe']
for key in keys_needed:
    if key not in st.session_state:
        st.session_state[key] = {} if key in ['defined_kpis', 'tracked_kpi_data', 'recommendation_feedback'] else [] if key == 'generated_recommendations' else "" if key == 'deep_insights' else None

# --- Check if Analysis Input is Available ---
data_context_for_calcs = None; input_data_description = "No data from previous steps available."
# ** FIX 4: Use .get() for safer access **
if st.session_state.get('analysis_results') is not None: data_context_for_calcs = st.session_state.analysis_results; input_data_description = "✅ Using 'Analyze & Insight' results."
elif st.session_state.get('engineered_dataframe') is not None: data_context_for_calcs = st.session_state.engineered_dataframe; input_data_description = "⚠️ Using 'Explore & Engineer' data."
elif st.session_state.get('cleaned_dataframe') is not None: data_context_for_calcs = st.session_state.cleaned_dataframe; input_data_description = "⚠️ Using 'Clean & Transform' data."
elif st.session_state.get('connection_info') is not None: data_context_for_calcs = st.session_state.connection_info; input_data_description = f"⚠️ Using '{st.session_state.connection_info.get('type')}' DB connection."
else: st.warning("⚠️ Please run an analysis or prepare data first."); st.stop()
st.info(input_data_description); st.divider()

# --- Main Layout: KPIs & Recommendations | Reporting ---
col1, col2 = st.columns([0.4, 0.6])

# --- Column 1: KPIs & Recommendations ---
with col1:
    # --- KPI Section ---
    st.subheader("🎯 Define & Track KPIs")
    kpi_container = st.container(border=True)
    with kpi_container:
        with st.form("kpi_form"):
            st.markdown("**Define New KPI:**")
            kpi_name = st.text_input("KPI Name*", placeholder="e.g., Avg Order Value")
            kpi_desc = st.text_input("Description", placeholder="e.g., Average total amount per order")
            # ** FIX 3: Remove invalid height argument **
            kpi_logic = st.text_area("Calculation Logic/Notes", placeholder="e.g., SUM(sales) / COUNT(orders)")
            submitted = st.form_submit_button("💾 Define KPI", use_container_width=True) # Submit Button Correctly Placed
            if submitted:
                if not kpi_name: st.warning("KPI Name required.")
                else:
                    with st.spinner("Defining KPI..."):
                        try: kpi_def = define_kpi_func(name=kpi_name, description=kpi_desc, calculation_logic=kpi_logic, db=None); st.session_state.defined_kpis[kpi_name] = kpi_def; st.toast(f"KPI '{kpi_name}' defined.", icon="📌")
                        except Exception as e: st.error(f"Define KPI Failed: {e}"); logger.error(f"KPI def failed: {e}", exc_info=True)

        st.markdown("**📊 Tracked KPIs:**")
        kpi_refresh_button_placeholder = st.empty()
        if not st.session_state.tracked_kpi_data: st.caption("_No KPIs tracked yet. Define & Refresh._")
        else: # (KPI Display Logic)
            for name, data in st.session_state.tracked_kpi_data.items(): display_kpi(label=name, value=data.get('value', 0), delta=data.get('delta'), delta_color="normal" if data.get('trend', 0) >= 0 else "inverse", show_arrow=(data.get('trend') is not None)); st.markdown("---")

        # (Refresh Button Logic)
        if st.session_state.defined_kpis:
             if kpi_refresh_button_placeholder.button("🔄 Refresh KPI Values", key="refresh_kpis_btn", use_container_width=True):
                 with st.spinner("Updating KPIs..."):
                    try: updated_kpi_data = track_kpis_func(data_context=data_context_for_calcs, db=None, defined_kpis=st.session_state.defined_kpis); st.session_state.tracked_kpi_data = updated_kpi_data; st.toast("KPIs refreshed.", icon="🔄"); time.sleep(1); st.rerun()
                    except Exception as e: st.error(f"Refresh KPIs Failed: {e}"); logger.error(f"KPI refresh failed: {e}", exc_info=True)
        else: kpi_refresh_button_placeholder.caption("_Define KPIs to enable tracking._")

    st.divider()

    # --- Recommendations Section ---
    st.subheader("💡 Actionable Recommendations")
    rec_container = st.container(border=True)
    with rec_container:
        if st.button("✨ Generate Recommendations", key="gen_rec_btn", use_container_width=True):
             with st.spinner("Generating recommendations..."):
                  try: # Uses generate_recs_func variable
                       recommendations = generate_recs_func(insights=st.session_state.get('deep_insights'), analysis_results=st.session_state.get('analysis_results'), kpi_data=st.session_state.get('tracked_kpi_data'), business_context="General", project_id=st.session_state.get('current_project_id'), db=None)
                       st.session_state.generated_recommendations = recommendations; st.session_state.recommendation_feedback = {}; st.toast("Recommendations generated.", icon="✨")
                  except Exception as e: st.error(f"Rec Gen Failed: {e}"); logger.error(f"Rec gen failed: {e}", exc_info=True)

        if not st.session_state.generated_recommendations: st.info("Click 'Generate Recommendations'.")
        else: # (Recommendations Display Logic)
            st.markdown("**AI Recommendations:**")
            for i, rec in enumerate(st.session_state.generated_recommendations):
                rec_db_id = rec.get('id'); rec_ui_key = f"rec_{rec_db_id if rec_db_id else f'gen_{i}'}"; rec_text = rec.get('recommendation', 'N/A')
                st.markdown(f"**{i+1}. {rec_text}**"); st.caption(f"Rationale: {rec.get('rationale', 'N/A')} | Confidence: `{rec.get('confidence', 'N/A')}` | Impact: `{rec.get('estimated_impact', 'N/A')}` | Priority: `{rec.get('priority', 'N/A')}`")
                # (Feedback UI - uses store_recommendation_feedback_func variable)
                current_feedback = st.session_state.recommendation_feedback.get(rec_db_id)
                feedback_cols = st.columns(3);
                with feedback_cols[0]:
                    if st.button("👍 Helpful", key=f"{rec_ui_key}_helpful", disabled=(current_feedback is not None), use_container_width=True):
                         st.session_state.recommendation_feedback[rec_db_id] = "Helpful"
                         try:
                              user_id = st.session_state.get('current_user', {}).get('id');
                              if user_id and rec_db_id and DB_AVAILABLE_FOR_FEEDBACK:
                                   with get_db_session() as db: success = store_recommendation_feedback_func(recommendation_id=rec_db_id, user_id=user_id, rating="Helpful", db=db)
                                   st.toast("Feedback submitted.", icon="👍") if success else st.error("Failed saving feedback.")
                              else: st.warning("Cannot save feedback (Login/Rec ID/DB missing).")
                         except Exception as fb_e: st.error(f"Feedback Error: {fb_e}")
                         st.rerun()
                with feedback_cols[1]:
                     if st.button("👎 Not Helpful", key=f"{rec_ui_key}_nothelpful", disabled=(current_feedback is not None), use_container_width=True):
                         st.session_state.recommendation_feedback[rec_db_id] = "Not Helpful"
                         try:
                              user_id = st.session_state.get('current_user', {}).get('id')
                              if user_id and rec_db_id and DB_AVAILABLE_FOR_FEEDBACK:
                                   with get_db_session() as db: success = store_recommendation_feedback_func(recommendation_id=rec_db_id, user_id=user_id, rating="Not Helpful", db=db)
                                   st.toast("Feedback submitted.", icon="👎") if success else st.error("Failed saving feedback.")
                              else: st.warning("Cannot save feedback (Login/Rec ID/DB missing).")
                         except Exception as fb_e: st.error(f"Feedback Error: {fb_e}")
                         st.rerun()
                with feedback_cols[2]:
                     if current_feedback: st.success(f"({current_feedback})")
                st.markdown("---")


# --- Column 2: Reporting ---
with col2:
    st.subheader("📄 Generate & Export Reports")
    report_container = st.container(border=True)
    with report_container:
        # (Report Generation Form - includes submit button)
        with st.form("report_form"):
            report_goal = st.text_input("Report Goal / Title*", key="report_goal_input"); st.markdown("**Include:**"); inc_cols = st.columns(3)
            with inc_cols[0]: inc_insights = st.checkbox("Insights", value=True, key="inc_insights", disabled=not st.session_state.get('deep_insights')) # Use get()
            with inc_cols[1]: inc_kpis = st.checkbox("KPIs", value=True, key="inc_kpis", disabled=not st.session_state.get('tracked_kpi_data')) # Use get()
            latest_plot = st.session_state.get('analysis_plot') or st.session_state.get('current_plot')
            with inc_cols[2]: inc_viz = st.checkbox("Last Plot", value=True, key="inc_viz", disabled=not latest_plot)
            inc_img = st.checkbox("AI Images", value=False, key="inc_img", help="Attempt illustrative images (experimental).")
            submitted = st.form_submit_button("📝 Generate Report", type="primary", use_container_width=True) # Submit button for report form
            if submitted:
                if not report_goal: st.warning("Enter report goal.")
                else:
                    with st.spinner("Generating report..."):
                        try: # Uses build_report_func variable
                            insights_c = st.session_state.get('deep_insights') if inc_insights else None; kpi_c = st.session_state.get('tracked_kpi_data') if inc_kpis else None; viz_c = [latest_plot] if inc_viz and latest_plot else None
                            report_data = build_report_func(report_goal=report_goal, analysis_results=st.session_state.get('analysis_results'), insights=insights_c, kpis=kpi_c, visualizations=viz_c, include_images=inc_img)
                            st.session_state.generated_report_data = report_data; st.toast("Report generated.", icon="📝")
                        except Exception as e: st.error(f"Report Gen Failed: {e}"); logger.error(f"Report gen failed: {e}", exc_info=True)

        # (Report Display Logic - same as before)
        st.markdown("**Generated Report:**")
        if st.session_state.generated_report_data:
            report_data = st.session_state.generated_report_data; report_narrative = report_data.get("narrative", "_Narrative failed._"); report_viz_list = report_data.get("visualizations", []); report_images = report_data.get("images", []); report_title = report_data.get('title', 'Report')
            report_display_area = st.container(height=400, border=True)
            with report_display_area:
                 st.subheader(report_title); st.markdown("---"); st.markdown(report_narrative)
                 if report_data.get('kpi_summary'): st.markdown(f"---\n**KPI Summary:**\n{report_data['kpi_summary']}")
                 if report_viz_list: # Display Visualizations
                      st.markdown("--- \n **Visualizations:**");
                      for viz_data in report_viz_list:
                           title = viz_data.get('title','Chart'); st.markdown(f"**{title}**")
                           try:
                               if viz_data.get('plotly_json'): fig = go.Figure(json.loads(viz_data['plotly_json'])); st.plotly_chart(fig, use_container_width=True)
                               elif viz_data.get('error'): st.warning(f"Viz Error: {viz_data['error']}")
                           except Exception as e: logger.error(f"Failed rendering plot '{title}': {e}"); st.warning(f"Display error for chart '{title}'.")
                 if report_images: # Display Images
                      st.markdown("--- \n **Images:**"); img_cols = st.columns(len(report_images) or 1)
                      for idx, img_data in enumerate(report_images):
                           with img_cols[idx % len(img_cols)]:
                                if img_data.get('image_bytes'): st.image(img_data['image_bytes'], caption=f"AI: {img_data.get('prompt','')[:50]}...")
                                elif img_data.get('error'): st.warning(f"Img Fail: {img_data['error']}")
            # (Export Options Logic - same as before)
            st.divider(); st.markdown("**Export Report:**"); export_cols = st.columns(3); report_title_safe = "".join(c if c.isalnum() else "_" for c in report_title)
            with export_cols[0]: st.download_button(label="📥 .md", data=report_narrative, file_name=f"{report_title_safe}.md", mime="text/markdown", use_container_width=True)
            with export_cols[1]:
                 pdf_disabled = not PDF_EXPORT_AVAILABLE; pdf_help = "PDF Exporter needed." if pdf_disabled else "Generate PDF."
                 if st.button("📄 .pdf", key="pdf_export_btn", disabled=pdf_disabled, help=pdf_help, use_container_width=True):
                      with st.spinner("PDF..."):
                           try: pdf_bytes = create_pdf_report(report_data); st.download_button("Download PDF", pdf_bytes, f"{report_title_safe}.pdf", "application/pdf", key="pdf_dl_final", use_container_width=True); st.success("PDF ready!")
                           except Exception as e: st.error(f"PDF Error: {e}")
            with export_cols[2]:
                 pptx_disabled = not PPTX_EXPORT_AVAILABLE; pptx_help = "PPTX Exporter needed." if pptx_disabled else "Generate PPTX."
                 if st.button("📊 .pptx", key="pptx_export_btn", disabled=pptx_disabled, help=pptx_help, use_container_width=True):
                      with st.spinner("PPTX..."):
                           try: pptx_bytes = create_pptx_report(report_data); st.download_button("Download PPTX", pptx_bytes, f"{report_title_safe}.pptx", "...", key="pptx_dl_final", use_container_width=True); st.success("PPTX ready!")
                           except Exception as e: st.error(f"PPTX Error: {e}")
        else: st.info("Generate a report.")
>>>>>>> 946a937 (Add application file)


# --- End of Lifecycle ---
st.divider()
<<<<<<< HEAD
st.success("🎉 You have reached the end of the data analysis lifecycle!")
=======
st.success("🎉 Analysis complete! Review reports and recommendations.")
# st.balloons()
>>>>>>> 946a937 (Add application file)
